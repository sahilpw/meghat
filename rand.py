# -*- coding: utf-8 -*-
"""ML_EXP4_IncomePrediction__RandomForest (1).ipynb

Automatically generated by Colaboratory.

dataset file is located at
    https://www.kaggle.com/datasets/uciml/adult-census-income

Importing lib
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Load the dataset"""

df = pd.read_csv('adult.csv')
df.head(10)

"""Understanding Dataset"""

print ("Total Rows     : " ,df.shape[0])
dataset_row = df.shape[0]
print ("Total Columns  : " ,df.shape[1])
print ("\nFeatures : \n" ,df.columns.tolist())
print ("\nMissing values :  ", df.isnull().sum().values.sum())
print ("\nUnique values :  \n",df.nunique())

df.info()

df.describe()

"""Missing Values"""

df_missing = (df=='?').sum()
print(df_missing)

"""percent_missing = (df=='?').sum() * 100/len(df)
percent_missing
"""

#droping row having missing values from dataset
df = df[df['workclass'] !='?']
df = df[df['occupation'] !='?']
df = df[df['native.country'] !='?']
df.head()

df_missing = (df=='?').sum()
print(df_missing)

print ("Total Rows after droping rows : " ,df.shape[0])
print("Numbers of rows drop: ", dataset_row -df.shape[0])

"""Data Preparation"""

from sklearn import preprocessing

df_categorical = df.select_dtypes(include=['object'])
df_categorical.head()

le = preprocessing.LabelEncoder()
df_categorical = df_categorical.apply(le.fit_transform)
df_categorical.head()

df = df.drop(df_categorical.columns,axis=1)
df = pd.concat([df,df_categorical],axis=1)
df['income'] = df['income'].astype('category')
df.head()

df.info()

"""Visualization"""

sns.heatmap(df.corr(), cmap = 'RdGy')

"""Spliting dataset"""

from sklearn.model_selection import train_test_split

X = df.drop('income',axis=1)
X = X.drop('sex',axis=1)
y = df['income']

X.head()

y.head()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20)

"""Appling  RandomForest Algo"""

from sklearn.ensemble import RandomForestClassifier

dt_default = RandomForestClassifier(max_depth=5)
dt_default.fit(X_train,y_train)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

y_pred_default = dt_default.predict(X_test)
print("confusion matrix\n",confusion_matrix(y_test,y_pred_default))
print(classification_report(y_test,y_pred_default))

print("accuracy score: ",accuracy_score(y_test,y_pred_default))
